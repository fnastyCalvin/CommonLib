apply plugin: 'com.android.application'

//定义打包时间函数
def packageTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("Asia/Shanghai"))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    useLibrary 'org.apache.http.legacy'

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        buildConfigField "boolean", "LOG_DEBUG", "true"
        ndk {
            abiFilters "armeabi"
        }
        resConfigs "zh"
        //java 1.8
        jackOptions {
            enabled true
        }
    }

    packagingOptions {
        exclude 'proguard-project.txt'
        exclude 'project.properties'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    dexOptions {
        javaMaxHeapSize '4g'
        dexInProcess false
        jumboMode true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    lintOptions {
        abortOnError false
        ignoreWarnings true
        checkReleaseBuilds true
        quiet true
        // Some libraries have issues with this.
        disable 'InvalidPackage'
        // Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'OldTargetApi'
    }

    /*signingConfigs {
        debug {
            try {
                keyAlias ""
                keyPassword KEY_PASSWORD
                storeFile file("StoreReview.jks")
                storePassword STORE_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
        release {
            try {
                keyAlias ""
                keyPassword KEY_PASSWORD
                storeFile file("StoreReview.jks")
                storePassword STORE_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }*/

    buildTypes {
        debug {
            debuggable true
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
//            signingConfig signingConfigs.debug
        }

        release {
            debuggable false
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["recyclerview-v7"]
    compile rootProject.ext.dependencies["cardview-v7"]
    compile rootProject.ext.dependencies["multidex"]
    compile rootProject.ext.dependencies["umeng-analytics"]
    compile (rootProject.ext.dependencies["retrofit2"]){
        exclude module: 'okhttp'
    }
    compile rootProject.ext.dependencies["converter-gson"]
    compile rootProject.ext.dependencies["adapter-rxjava"]

    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxbinding"]
    compile rootProject.ext.dependencies["okhttp-urlconnection"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["logging-interceptor"]

    compile rootProject.ext.dependencies["butterknife"]
    compile rootProject.ext.dependencies["eventbus"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["circleimageview"]
//    compile rootProject.ext.dependencies["paginate"]
//    compile rootProject.ext.dependencies["gif-drawable"]
    debugCompile rootProject.ext.dependencies["debug-leakcanary"]
    releaseCompile rootProject.ext.dependencies["release-leakcanary"]
    debugCompile rootProject.ext.dependencies["stetho"]
    debugCompile rootProject.ext.dependencies["stetho-okhttp"]
    releaseCompile rootProject.ext.dependencies["stetho-okhttp"]
    compile rootProject.ext.dependencies["gson"]
}
